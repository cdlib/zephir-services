import os
import json
import shutil

import plyvel
import pytest

# convenience methods for converting ints to and from bytes
def int_to_bytes(inum):
    return inum.to_bytes((inum.bit_length() + 7) // 8, "big")


def int_from_bytes(bnum):
    return int.from_bytes(bnum, "big")


@pytest.fixture
def td_tmpdir(request, tmpdir):
    """Copy test data into the temporary directory for tests.

    Note:
        1) Test data is located by convention. Create a directory with the same name as
        the test file (test-file: test_mymodule.py, test-data: test_mymodule/* )
        2) Using the temporary directory prevents overwriting of data in test suite

    Args:
        request: Fixture with test case filename, used to find test data.
        tmpdir: Fixture for test case temporary directory generated by pytest.

    Returns:
        Filepath of test data subdirectory within the temporary dirctory.

    """
    td_dirname = os.path.splitext(os.path.basename(request.fspath))[0]
    td_path = os.path.splitext(request.fspath)[0]
    tmp_td_path = os.path.join(tmpdir, td_dirname)
    shutil.copytree(td_path, tmp_td_path)
    return tmp_td_path


@pytest.fixture
def case_data(td_tmpdir):
    """Create a case data set by loading json test data

    Note:
        1) This expects test_cases.json file in the test directory

    Args:
        tmpdir: Fixture for test case temporary directory generated by pytest.

    Returns:
        Json test case data converted into Python data structure

    """
    with open(os.path.join(td_tmpdir, "test_cases.json"), "r") as read_file:
        cases = json.load(read_file)
    return cases


@pytest.fixture
def primary_ldb_path(td_tmpdir, case_data):
    """Create a primary ocn lookup LevelDB database based on casedata

    Note:
        1) This expects an list of lists: [[ocn,primary-ocn]]

    Args:
        tmpdir: Fixture for test case temporary directory generated by pytest.
        case_data: List of list test caes data loaded by fixture

    Returns:
        Path to the LevelDB database

    """
    db_path = os.path.join(td_tmpdir, "primary_lookup/")
    db = plyvel.DB(db_path, create_if_missing=True)
    for row in case_data:
        db.put(int_to_bytes(int(row[0])), int_to_bytes(int(row[1])))
    db.close()
    return db_path


@pytest.fixture
def split_cases(case_data):
    """Splits ocn case data into input and expected output

    Args:
        tmpdir: Fixture for test case temporary directory generated by pytest.
        case_data: List of list test caes data loaded by fixture

    Returns:
        Dict of "input" and "expected" lists

    """
    div_cases = {"input": [], "expected": []}
    for idx, x in enumerate(case_data):
        div_cases["input"].append(x[0])
        div_cases["expected"].append(x[1])
    return div_cases


@pytest.fixture
def data_dir(request):
    """
    Note:
        Test data is located by convention in a directory with the same name as
        the test file, for example
        test-file: test_mymodule.py
        data-dir: test_mymodule

    Args:
        request: Fixture with test case filename, used to find test data directory.

    Returns:
        Filepath of the default test data directory.

    """
    request_path = os.path.dirname(request.fspath)
    request_filename = os.path.basename(request.fspath)
    td_dirname = os.path.splitext(request_filename)[0]
    return os.path.join(request_path, td_dirname)
